// –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –û–ë–ñ–ê–õ–û–í–ê–ù–ò–ô –ë–ê–ù–û–í
const BOT_WEBHOOK_URL = "https://discord-bot-production-147e.up.railway.app/webhook/ban-appeal"; // URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const DISCORD_MENTIONS = "<@&1389983287589732352> <@&1389984050160074762>"; // –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
const EMBED_COLOR = 16753920; // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç (–¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π)
const EMBED_TITLE = "üîì –ù–æ–≤–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞"; // –ó–∞–≥–æ–ª–æ–≤–æ–∫
const EMBED_DESCRIPTION = ""; // –û–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
const EMBED_FOOTER = "–°–∏—Å—Ç–µ–º–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π"; // –¢–µ–∫—Å—Ç –≤–Ω–∏–∑—É

// –ù–ê–ó–í–ê–ù–ò–ï –ü–û–õ–Ø –° DISCORD –ù–ò–ö–û–ú (—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Google Forms)
const DISCORD_FIELD_NAME = "–í–∞—à –¥–∏—Å–∫–æ—Ä–¥:"; // –¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
NUMBER_QUESTION = false;
CHECKBOX_STROKE = false;
CHECKBOX_SEPARATION = "\n ";
GRID_STROKE = false;
GRID_SEPARATION = "\n ";
MULTIPLE_CHOICE_STROKE = false;
MULTIPLE_CHOICE_SEPARATION = "\n ";

// ================================================================================================================ //

function onSubmit(e) {
    const response = e.response.getItemResponses();
    let fields = [];
    var num = 1;

    for (const responseAnswer of response) {
        const question = responseAnswer.getItem().getTitle();
        let answer = responseAnswer.getResponse();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        switch (responseAnswer.getItem().getType()) {
            case FormApp.ItemType.CHECKBOX:
            case FormApp.ItemType.CHECKBOX_GRID:
                if (Array.isArray(answer)) { 
                    if (CHECKBOX_STROKE) {
                        answer = answer.map(choice => `\`${choice}\``).join(CHECKBOX_SEPARATION);
                    } else {
                        answer = answer.join(CHECKBOX_SEPARATION);
                    }
                }
                break;
            case FormApp.ItemType.GRID:
                const gridItem = responseAnswer.getItem().asGridItem();
                const rows = gridItem.getRows();

                if (Array.isArray(answer)) {
                    if (GRID_STROKE) {
                        answer = answer.map((selectedChoice, index) => `\`${rows[index]}: ${selectedChoice}\``).join(GRID_SEPARATION);
                    } else {
                        answer = answer.map((selectedChoice, index) => `${rows[index]}: ${selectedChoice}`).join(GRID_SEPARATION);
                    }
                }
                break;
            case FormApp.ItemType.MULTIPLE_CHOICE:
                if (Array.isArray(answer)) {
                    if (MULTIPLE_CHOICE_STROKE) {
                        answer = answer.map(choice => `\`${choice}\``).join(MULTIPLE_CHOICE_SEPARATION);
                    } else {
                        answer = answer.join(MULTIPLE_CHOICE_SEPARATION);
                    }
                }
                break;
        }

        if (!answer) {
            continue;
        }

        if (NUMBER_QUESTION) {
            fields.push({
                "name": `${num}. ${question}`,
                "value": answer,
                "inline": false
            });
        } else {
            fields.push({
                "name": question,
                "value": answer,
                "inline": false
            });
        }
        num += 1
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–æ—Ç–∞
    var options = {
        "method": "post",
        "headers": {
            "Content-Type": "application/json",
        },
        "payload": JSON.stringify({
            "content": DISCORD_MENTIONS,
            "title": EMBED_TITLE,
            "description": EMBED_DESCRIPTION,
            "color": EMBED_COLOR,
            "fields": fields,
            "footer": EMBED_FOOTER
        })
    };

    try {
        UrlFetchApp.fetch(BOT_WEBHOOK_URL, options);
    } catch (error) {
        Logger.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è: ' + error);
    }
}
