const { app, BrowserWindow, dialog, ipcMain } = require('electron');
const { autoUpdater } = require('electron-updater');
const path = require('path');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
autoUpdater.autoDownload = false; // –ù–µ —Å–∫–∞—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
autoUpdater.autoInstallOnAppQuit = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

let updateWindow = null;

// –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º API —Å–µ—Ä–≤–µ—Ä–∞
// –í production (—Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏) –∏—â–µ–º .env –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
let envPath;
let envLoaded = false;

if (app.isPackaged) {
  // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Ç–µ–π –¥–ª—è production
  const possiblePaths = [
    path.join(process.resourcesPath, 'app.asar', '.env'),
    path.join(process.resourcesPath, '.env'),
    path.join(path.dirname(app.getPath('exe')), '.env'),
    path.join(__dirname, '.env')
  ];
  
  for (const testPath of possiblePaths) {
    if (fs.existsSync(testPath)) {
      envPath = testPath;
      require('dotenv').config({ path: envPath });
      console.log('‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑:', envPath);
      envLoaded = true;
      break;
    }
  }
  
  if (!envLoaded) {
    console.warn('‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:');
    possiblePaths.forEach(p => console.warn('  -', p));
  }
} else {
  // Development —Ä–µ–∂–∏–º
  envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    require('dotenv').config({ path: envPath });
    console.log('‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑:', envPath);
    envLoaded = true;
  }
}

// –ï—Å–ª–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
if (!envLoaded) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
let serverReady = false;
const apiServer = require('./api-server-supabase.js');

// –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(() => {
  serverReady = true;
  console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤');
}, 3000);

let mainWindow;

function createWindow() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const iconPath = app.isPackaged
    ? path.join(process.resourcesPath, 'icon.ico')
    : path.join(__dirname, 'icon.ico');

  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 1200,
    minHeight: 700,
    icon: iconPath,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false
    },
    autoHideMenuBar: true, // –°–∫—Ä—ã—Ç—å –º–µ–Ω—é
    title: 'SolarBox - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ)
  mainWindow.loadURL('data:text/html,' + encodeURIComponent(`
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        body { margin: 0; background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); display: flex; justify-content: center; align-items: center; height: 100vh; font-family: 'Inter', Arial, sans-serif; }
        .loader-content { text-align: center; }
        .loader-spinner { width: 50px; height: 50px; margin: 0 auto 2rem; border-radius: 50%; border: 4px solid transparent; border-top-color: #764ba2; border-right-color: #764ba2; animation: spin 0.8s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .loader-text { color: white; font-size: 1.2rem; font-weight: 600; margin-bottom: 0.5rem; animation: pulse 1.5s ease-in-out infinite; }
        .loader-subtext { color: rgba(255, 255, 255, 0.6); font-size: 0.9rem; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
      </style>
    </head>
    <body>
      <div class="loader-content">
        <div class="loader-spinner"></div>
        <div class="loader-text">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        <div class="loader-subtext">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</div>
      </div>
    </body>
    </html>
  `));
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º login.html
  setTimeout(() => {
    mainWindow.loadURL('http://localhost:4000/login.html').catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      mainWindow.loadURL('data:text/html,<h1 style="text-align:center;margin-top:50px;font-family:Arial;">–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1><p style="text-align:center;font-family:Arial;">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>');
    });
  }, 3500);

  // DevTools —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on('closed', function () {
    mainWindow = null;
  });

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
  mainWindow.on('page-title-updated', (event) => {
    event.preventDefault();
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function createUpdateWindow(updateInfo) {
  if (updateWindow) {
    updateWindow.focus();
    return;
  }

  updateWindow = new BrowserWindow({
    width: 550,
    height: 450,
    resizable: false,
    frame: false,
    transparent: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    },
    parent: mainWindow,
    modal: true
  });

  const updatePath = app.isPackaged
    ? path.join(process.resourcesPath, 'app', 'public', 'update.html')
    : path.join(__dirname, 'public', 'update.html');

  if (fs.existsSync(updatePath)) {
    updateWindow.loadFile(updatePath);
  } else {
    updateWindow.loadURL('http://localhost:4000/update.html');
  }

  updateWindow.on('closed', () => {
    updateWindow = null;
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  updateWindow.webContents.on('did-finish-load', () => {
    updateWindow.webContents.send('update-info', updateInfo);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ IPC –æ—Ç –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
ipcMain.on('download-update', () => {
  autoUpdater.downloadUpdate();
});

ipcMain.on('restart-app', () => {
  autoUpdater.quitAndInstall();
});

ipcMain.on('close-update-window', () => {
  if (updateWindow) {
    updateWindow.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
autoUpdater.on('checking-for-update', () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
});

autoUpdater.on('update-available', (info) => {
  console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', info.version);
  createUpdateWindow(info);
});

autoUpdater.on('update-not-available', () => {
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è');
});

autoUpdater.on('download-progress', (progressObj) => {
  console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞:', progressObj.percent.toFixed(2) + '%');
  
  if (mainWindow) {
    mainWindow.setProgressBar(progressObj.percent / 100);
  }
  
  if (updateWindow) {
    updateWindow.webContents.send('download-progress', progressObj);
  }
});

autoUpdater.on('update-downloaded', () => {
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
  
  if (mainWindow) {
    mainWindow.setProgressBar(-1);
  }
  
  if (updateWindow) {
    updateWindow.webContents.send('update-downloaded');
  }
});

autoUpdater.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  
  if (updateWindow) {
    updateWindow.webContents.send('update-error', error);
  }
});

app.whenReady().then(() => {
  createWindow();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  if (app.isPackaged) {
    setTimeout(() => {
      autoUpdater.checkForUpdates();
    }, 3000);
  }

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});
