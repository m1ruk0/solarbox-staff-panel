const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

class PasswordsDatabase {
  constructor() {
    this.tableName = 'passwords';
  }

  // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  hashPassword(password) {
    return crypto.createHash('sha256').update(password).digest('hex');
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
  async addUser(discord, password, question, answer) {
    try {
      console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${discord}...`);
      
      const hashedPassword = this.hashPassword(password);
      const hashedAnswer = this.hashPassword(answer.toLowerCase());
      
      const { data, error } = await supabase
        .from(this.tableName)
        .insert([{
          discord: discord,
          password: hashedPassword,
          question: question,
          answer: hashedAnswer
        }])
        .select()
        .single();

      if (error) throw error;

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discord} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å
  async verifyPassword(discord, password) {
    try {
      const { data, error } = await supabase
        .from(this.tableName)
        .select('*')
        .eq('discord', discord)
        .single();

      if (error || !data) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const hashedPassword = this.hashPassword(password);
      if (data.password === hashedPassword) {
        return { 
          success: true, 
          question: data.question
        };
      }

      return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error.message);
      return { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
  async getSecurityQuestion(discord) {
    try {
      const { data, error } = await supabase
        .from(this.tableName)
        .select('question')
        .eq('discord', discord)
        .single();

      if (error || !data) {
        return null;
      }

      return data.question;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error.message);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
  async verifyAnswer(discord, answer) {
    try {
      const { data, error } = await supabase
        .from(this.tableName)
        .select('answer')
        .eq('discord', discord)
        .single();

      if (error || !data) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const hashedAnswer = this.hashPassword(answer.toLowerCase());
      if (data.answer === hashedAnswer) {
        return { success: true };
      }

      return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.message);
      return { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getAllUsers() {
    try {
      const { data, error } = await supabase
        .from(this.tableName)
        .select('discord, question, created_at')
        .order('created_at', { ascending: false });

      if (error) throw error;

      return data.map(row => ({
        discord: row.discord,
        question: row.question,
        createdAt: row.created_at
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
  async updatePassword(discord, newPassword) {
    try {
      const hashedPassword = this.hashPassword(newPassword);
      
      const { error } = await supabase
        .from(this.tableName)
        .update({ password: hashedPassword })
        .eq('discord', discord);

      if (error) throw error;

      console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è ${discord} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error.message);
      return false;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(discord) {
    try {
      const { error } = await supabase
        .from(this.tableName)
        .delete()
        .eq('discord', discord);

      if (error) throw error;

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discord} —É–¥–∞–ª–µ–Ω`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      return false;
    }
  }
}

module.exports = new PasswordsDatabase();
