require('dotenv').config();
const { google } = require('googleapis');

class ApplicationsDatabase {
  constructor() {
    this.sheets = null;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞—è–≤–æ–∫ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é
    this.spreadsheetId = process.env.APPLICATIONS_SHEET_ID || process.env.GOOGLE_SHEET_ID;
    this.initialized = false;
    this.sheetName = '–ó–∞—è–≤–∫–∏'; // ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
  }

  async initialize() {
    if (this.initialized) return;

    try {
      const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
      const auth = new google.auth.GoogleAuth({
        credentials,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      this.sheets = google.sheets({ version: 'v4', auth });
      this.initialized = true;
      console.log('‚úÖ Google Sheets API –¥–ª—è –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏
  async getAllApplications() {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: `${this.sheetName}`, // –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
      });

      const rows = response.data.values || [];
      if (rows.length === 0) return [];

      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = rows[0];
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –¥–∞–Ω–Ω—ã–µ
      return rows.slice(1).map((row, index) => {
        const application = {
          id: (index + 2).toString(), // ID = –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
          timestamp: row[0] || '',
          status: 'pending',
          position: '',
          comment: '',
          allFields: {} // –í—Å–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è
        headers.forEach((header, i) => {
          if (row[i]) {
            application.allFields[header] = row[i];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            const headerLower = header.toLowerCase();
            
            if (headerLower.includes('–¥–∏—Å–∫–æ—Ä–¥') || headerLower.includes('discord')) {
              application.discord = row[i];
            }
            if (headerLower.includes('–Ω–∏–∫–Ω–µ–π–º') || headerLower.includes('–Ω–∏–∫')) {
              application.minecraft = row[i];
            }
            if (headerLower.includes('–∏–º—è')) {
              application.name = row[i];
            }
            if (headerLower.includes('–≤–æ–∑—Ä–∞—Å—Ç') || headerLower.includes('–ª–µ—Ç')) {
              application.age = row[i];
            }
            if (headerLower.includes('–Ω–∞ –∫–æ–≥–æ –ø–æ–¥–∞–µ—Ç–µ')) {
              application.position = row[i].toLowerCase().includes('–º–µ–¥–∏—è') ? '–º–µ–¥–∏—è' : '—Ö–µ–ª–ø–µ—Ä';
            }
          }
        });

        return application;
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error.message);
      return [];
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
  async addApplication(discord, minecraft, age, experience, why) {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      const today = new Date().toLocaleString('ru-RU');
      
      await this.sheets.spreadsheets.values.append({
        spreadsheetId: this.spreadsheetId,
        range: `${this.sheetName}!A:I`,
        valueInputOption: 'USER_ENTERED',
        resource: {
          values: [[discord, minecraft, age, experience, why, today, 'pending', '', '']]
        }
      });

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç ${discord} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error.message);
      return false;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)
  async deleteApplication(rowId) {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
      const sheetMetadata = await this.sheets.spreadsheets.get({
        spreadsheetId: this.spreadsheetId,
        fields: 'sheets(properties(sheetId,title))'
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const sheet = sheetMetadata.data.sheets.find(
        s => s.properties.title === this.sheetName
      );
      
      if (!sheet) {
        throw new Error(`–õ–∏—Å—Ç "${this.sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      const sheetId = sheet.properties.sheetId;
      
      console.log(`üîç –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowId} —Å –ª–∏—Å—Ç–∞ "${this.sheetName}" (sheetId: ${sheetId})`);
      
      // –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
      await this.sheets.spreadsheets.batchUpdate({
        spreadsheetId: this.spreadsheetId,
        resource: {
          requests: [{
            deleteDimension: {
              range: {
                sheetId: sheetId,
                dimension: 'ROWS',
                startIndex: parseInt(rowId) - 1, // API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                endIndex: parseInt(rowId)
              }
            }
          }]
        }
      });

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ ${rowId})`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      console.error('–î–µ—Ç–∞–ª–∏:', error.message);
      return false;
    }
  }

  // –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É (–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã)
  async approveApplication(rowId, position, comment) {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      await this.deleteApplication(rowId);
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ ${rowId})`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error.message);
      return false;
    }
  }

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É (–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã)
  async rejectApplication(rowId, comment) {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      await this.deleteApplication(rowId);
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ ${rowId})`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error.message);
      return false;
    }
  }
}

module.exports = new ApplicationsDatabase();
