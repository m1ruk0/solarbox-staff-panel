require('dotenv').config();
const express = require('express');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

function createWebhookServer(client) {
  const app = express();
  app.use(express.json());

  // Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Forms
  app.post('/webhook/application', async (req, res) => {
    try {
      const data = req.body;
      
      // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord –∫–∞–Ω–∞–ª - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–∑ Google Forms');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏
      let discordUsername = '';
      let minecraftNick = '';
      let age = '';
      let experience = '';
      let why = '';
      let applicationType = '';
      const fields = data.fields || [];
      
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã:');
      fields.forEach((field, index) => {
        console.log(`   ${index + 1}. "${field.name}" = "${field.value}"`);
      });
      
      for (const field of fields) {
        const fieldNameLower = field.name.toLowerCase();
        const fieldValueLower = field.value.toLowerCase();
        
        // –ò—â–µ–º –ø–æ–ª–µ —Å Discord
        if (fieldNameLower.includes('–¥–∏—Å–∫–æ—Ä–¥') || fieldNameLower.includes('discord')) {
          discordUsername = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å Discord: "${field.name}" = "${discordUsername}"`);
        }
        
        // –ò—â–µ–º –ø–æ–ª–µ —Å Minecraft
        if (fieldNameLower.includes('–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç') || fieldNameLower.includes('minecraft') || fieldNameLower.includes('–Ω–∏–∫ –≤ –∏–≥—Ä–µ')) {
          minecraftNick = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å Minecraft: "${field.name}" = "${minecraftNick}"`);
        }
        
        // –ò—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        if (fieldNameLower.includes('–≤–æ–∑—Ä–∞—Å—Ç') || fieldNameLower.includes('age') || fieldNameLower.includes('–ª–µ—Ç')) {
          age = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: "${field.name}" = "${age}"`);
        }
        
        // –ò—â–µ–º –æ–ø—ã—Ç
        if (fieldNameLower.includes('–æ–ø—ã—Ç') || fieldNameLower.includes('experience')) {
          experience = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø—ã—Ç: "${field.name}" = "${experience}"`);
        }
        
        // –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—É
        if (fieldNameLower.includes('–ø–æ—á–µ–º—É') || fieldNameLower.includes('–∑–∞—á–µ–º') || fieldNameLower.includes('why')) {
          why = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: "${field.name}" = "${why}"`);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
        if (fieldNameLower.includes('–¥–æ–ª–∂–Ω–æ—Å—Ç—å') || fieldNameLower.includes('—Ä–æ–ª—å') || 
            fieldValueLower.includes('—Ö–µ–ª–ø–µ—Ä') || fieldValueLower.includes('–º–µ–¥–∏—è')) {
          if (fieldValueLower.includes('—Ö–µ–ª–ø–µ—Ä')) {
            applicationType = '—Ö–µ–ª–ø–µ—Ä';
          } else if (fieldValueLower.includes('–º–µ–¥–∏—è')) {
            applicationType = '–º–µ–¥–∏—è';
          }
          console.log(`‚úÖ –¢–∏–ø –∑–∞—è–≤–∫–∏: ${applicationType}`);
        }
      }
      
      if (!discordUsername) {
        console.log('‚ö†Ô∏è –ü–æ–ª–µ —Å Discord –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      }
      
      if (!applicationType) {
        applicationType = '—Ö–µ–ª–ø–µ—Ä'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('‚ö†Ô∏è –¢–∏–ø –∑–∞—è–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: —Ö–µ–ª–ø–µ—Ä');
      }

      // –ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
      // –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord –∫–∞–Ω–∞–ª
      
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      console.log(`   Discord: ${discordUsername}`);
      console.log(`   Minecraft: ${minecraftNick}`);
      console.log(`   –¢–∏–ø: ${applicationType}`);

      res.status(200).json({ success: true, message: '–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
      res.status(500).json({ error: error.message });
    }
  });

  // Endpoint –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π –±–∞–Ω–æ–≤
  app.post('/webhook/ban-appeal', async (req, res) => {
    try {
      const data = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π
      const channelId = process.env.BAN_APPEAL_CHANNEL_ID;
      const channel = await client.channels.fetch(channelId);

      if (!channel) {
        return res.status(404).json({ error: 'Ban appeal channel not found' });
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º Discord –Ω–∏–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      let discordUsername = '';
      const fields = data.fields || [];
      
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:');
      fields.forEach((field, index) => {
        console.log(`   ${index + 1}. "${field.name}" = "${field.value}"`);
      });
      
      for (const field of fields) {
        const fieldNameLower = field.name.toLowerCase();
        
        if (fieldNameLower.includes('–¥–∏—Å–∫–æ—Ä–¥') || fieldNameLower.includes('discord')) {
          discordUsername = field.value;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å Discord: "${field.name}" = "${discordUsername}"`);
          break;
        }
      }
      
      if (!discordUsername) {
        console.log('‚ö†Ô∏è –ü–æ–ª–µ —Å Discord –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      }

      // –°–æ–∑–¥–∞–µ–º embed
      const embed = new EmbedBuilder()
        .setColor(data.color || 0xffa500)
        .setTimestamp();

      if (data.title) {
        embed.setTitle(data.title);
      }

      if (data.description) {
        embed.setDescription(data.description);
      }

      if (data.fields && data.fields.length > 0) {
        data.fields.forEach(field => {
          embed.addFields({
            name: field.name,
            value: field.value,
            inline: field.inline || false
          });
        });
      }

      if (data.footer) {
        embed.setFooter({ text: data.footer });
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`unban_${discordUsername}`)
            .setLabel('‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId(`reject_appeal_${discordUsername}`)
            .setLabel('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å')
            .setStyle(ButtonStyle.Danger)
        );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const message = await channel.send({
        content: data.content || '',
        embeds: [embed],
        components: [row]
      });

      console.log('‚úÖ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª');
      res.status(200).json({ success: true, messageId: message.id });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:', error);
      res.status(500).json({ error: error.message });
    }
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° URL –¥–ª—è –∑–∞—è–≤–æ–∫: http://localhost:${PORT}/webhook/application`);
    console.log(`üì° URL –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–π: http://localhost:${PORT}/webhook/ban-appeal`);
  });

  return app;
}

module.exports = { createWebhookServer };
