require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, SlashCommandBuilder, REST, Routes, MessageFlags, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder: ModalActionRowBuilder } = require('discord.js');
const config = require('./config');
const { createWebhookServer } = require('./webhook-server');
const staffDB = require('./staff-database');
const { handleStaffButton, handleStaffModal } = require('./staff-handlers');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
  ]
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const commands = [
  new SlashCommandBuilder()
    .setName('yes')
    .setDescription('–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption(option =>
      option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setRequired(true)
    ),
  new SlashCommandBuilder()
    .setName('no')
    .setDescription('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption(option =>
      option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setRequired(true)
    ),
  new SlashCommandBuilder()
    .setName('sn')
    .setDescription('–£–≤–æ–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
    .addUserOption(option =>
      option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('–ø—Ä–∏—á–∏–Ω–∞')
        .setDescription('–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è')
        .setRequired(true)
    ),
  new SlashCommandBuilder()
    .setName('roles')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Ö ID'),
  new SlashCommandBuilder()
    .setName('panel')
    .setDescription('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º')
    .addChannelOption(option =>
      option.setName('–∫–∞–Ω–∞–ª')
        .setDescription('–ö–∞–Ω–∞–ª –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å')
        .setRequired(true)
    )
].map(command => command.toJSON());

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async function registerCommands() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é slash-–∫–æ–º–∞–Ω–¥...');
    
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    
    await rest.put(
      Routes.applicationCommands(client.user.id),
      { body: commands }
    );
    
    console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function hasPermission(member) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
  return config.allowedRoles.some(roleId => member.roles.cache.has(roleId));
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏
async function sendApplicationResponse(member, isAccepted, moderator, applicationType) {
  try {
    const appConfig = config.applicationTypes[applicationType];
    if (!appConfig) {
      console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏: ${applicationType}`);
      return false;
    }

    const messageConfig = isAccepted ? appConfig.acceptedMessage : appConfig.rejectedMessage;
    
    const embed = new EmbedBuilder()
      .setTitle(messageConfig.title)
      .setDescription(messageConfig.description)
      .setColor(messageConfig.color)
      .setTimestamp()
      .setFooter({ text: `–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: ${moderator.tag}` });
    
    // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤—ã–¥–∞–µ–º —Ä–æ–ª—å
    if (isAccepted && appConfig.roleId) {
      try {
        await member.roles.add(appConfig.roleId);
        console.log(`‚úÖ –†–æ–ª—å ${appConfig.roleId} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member.user.tag}`);
      } catch (roleError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏:', roleError);
      }
    }
    
    await member.user.send({ embeds: [embed] });
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async function fireModerator(member, moderator, reason) {
  try {
    const removedRoles = [];
    const failedRoles = [];
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É ${member.user.tag}`);
    console.log(`üìã –í—Å–µ–≥–æ —Ä–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.moderationRoles.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`\nüë§ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${member.roles.cache.size}):`);
    member.roles.cache.forEach(role => {
      if (role.name !== '@everyone') {
        const inConfig = config.moderationRoles.includes(role.id);
        console.log(`   - ${role.name} (ID: ${role.id}) ${inConfig ? '‚úì –í –∫–æ–Ω—Ñ–∏–≥–µ' : '‚úó –ù–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ'}`);
      }
    });
    
    for (const roleId of config.moderationRoles) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å: ${roleId} (—Ç–∏–ø: ${typeof roleId})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –≤ –∫—ç—à–µ
      const hasRole = member.roles.cache.has(roleId);
      console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ has(): ${hasRole}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Ä–æ–ª—å –ø–æ ID
      const foundRole = member.roles.cache.get(roleId);
      console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ get(): ${foundRole ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      
      if (hasRole || foundRole) {
        console.log(`   ‚úì –†–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        try {
          await member.roles.remove(roleId);
          removedRoles.push(roleId);
          console.log(`   ‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
        } catch (roleError) {
          failedRoles.push(roleId);
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:`);
          console.error(`      –ö–æ–¥ –æ—à–∏–±–∫–∏: ${roleError.code}`);
          console.error(`      –°–æ–æ–±—â–µ–Ω–∏–µ: ${roleError.message}`);
          
          if (roleError.code === 50013) {
            console.error(`      üí° –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ä–æ–ª—å –±–æ—Ç–∞ –í–´–®–ï —ç—Ç–æ–π —Ä–æ–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞`);
          }
        }
      } else {
        console.log(`   ‚äò –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)`);
      }
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ: —É–¥–∞–ª–µ–Ω–æ ${removedRoles.length}, –Ω–µ —É–¥–∞–ª–æ—Å—å ${failedRoles.length}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–∏—á–∏–Ω–æ–π
    let description = config.messages.fired.description;
    if (reason) {
      description += `\n\n**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}`;
    }
    
    const embed = new EmbedBuilder()
      .setTitle(config.messages.fired.title)
      .setDescription(description)
      .setColor(config.messages.fired.color)
      .setTimestamp()
      .setFooter({ text: `–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: ${moderator.tag}` });
    
    try {
      await member.user.send({ embeds: [embed] });
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫—Ä—ã—Ç—ã)');
    }
    
    return { 
      success: true, 
      removedCount: removedRoles.length,
      failedCount: failedRoles.length,
      failedRoles: failedRoles
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', error);
    return { success: false, error: error.message };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ slash-–∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
client.on('interactionCreate', async interaction => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  if (interaction.isButton()) {
    const customId = interaction.customId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!hasPermission(interaction.member)) {
      await interaction.reply({
        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
    if (customId.startsWith('staff_')) {
      await handleStaffButton(interaction);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –±–∞–Ω–∞
    if (customId.startsWith('unban_') || customId.startsWith('reject_appeal_')) {
      const action = customId.startsWith('unban_') ? 'unban' : 'reject_appeal';
      const discordUsername = customId.replace('unban_', '').replace('reject_appeal_', '');
      
      try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
        const members = await interaction.guild.members.fetch();
        const targetMember = members.find(member => {
          return member.user.tag === discordUsername || 
                 member.user.username === discordUsername ||
                 member.displayName === discordUsername;
        });

        if (action === 'unban') {
          // –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await interaction.guild.members.unban(targetMember ? targetMember.user.id : discordUsername, 
              `–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (targetMember) {
              const embed = new EmbedBuilder()
                .setTitle(config.messages.banAppealAccepted.title)
                .setDescription(config.messages.banAppealAccepted.description)
                .setColor(config.messages.banAppealAccepted.color)
                .setTimestamp()
                .setFooter({ text: `–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: ${interaction.user.tag}` });
              
              try {
                await targetMember.user.send({ embeds: [embed] });
              } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await interaction.update({
              components: []
            });

            await interaction.followUp({
              content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${discordUsername} —Ä–∞–∑–±–∞–Ω–µ–Ω!`,
              flags: MessageFlags.Ephemeral
            });
          } catch (error) {
            await interaction.reply({
              content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: ${error.message}\n\n–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π.`,
              flags: MessageFlags.Ephemeral
            });
          }
        } else {
          // –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ
          if (targetMember) {
            const embed = new EmbedBuilder()
              .setTitle(config.messages.banAppealRejected.title)
              .setDescription(config.messages.banAppealRejected.description)
              .setColor(config.messages.banAppealRejected.color)
              .setTimestamp()
              .setFooter({ text: `–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: ${interaction.user.tag}` });
            
            try {
              await targetMember.user.send({ embeds: [embed] });
            } catch (error) {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
            }
          }

          await interaction.update({
            components: []
          });

          await interaction.followUp({
            content: `‚ùå –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${discordUsername} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.`,
            flags: MessageFlags.Ephemeral
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:', error);
        await interaction.reply({
          content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è.',
          flags: MessageFlags.Ephemeral
        });
      }
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏ Discord –Ω–∏–∫ –∏–∑ customId
    const parts = customId.split('_');
    const action = parts[0];
    const applicationType = parts[1];
    const discordUsername = parts.slice(2).join('_'); // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –Ω–∏–∫–µ –µ—Å—Ç—å _
    
    if (action === 'accept' || action === 'reject') {
      const isAccepted = action === 'accept';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∏–ø –∑–∞—è–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const appConfig = config.applicationTypes[applicationType];
      if (!appConfig) {
        await interaction.reply({
          content: `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏: ${applicationType}`,
          flags: MessageFlags.Ephemeral
        });
        return;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
      try {
        console.log(`üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${discordUsername}"`);
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const members = await interaction.guild.members.fetch();
        
        // –î–µ–±–∞–≥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º
        console.log(`üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:`);
        console.log(`   - –ü–æ tag (username#0000): ${discordUsername}`);
        console.log(`   - –ü–æ username: ${discordUsername}`);
        console.log(`   - –ü–æ displayName: ${discordUsername}`);
        
        const targetMember = members.find(member => {
          const matches = 
            member.user.tag === discordUsername || 
            member.user.username === discordUsername ||
            member.displayName === discordUsername ||
            member.user.tag.toLowerCase() === discordUsername.toLowerCase() ||
            member.user.username.toLowerCase() === discordUsername.toLowerCase() ||
            member.displayName.toLowerCase() === discordUsername.toLowerCase();
          
          if (matches) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${member.user.tag} (ID: ${member.user.id})`);
          }
          
          return matches;
        });

        if (!targetMember) {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
          console.log(`üìã –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:`);
          members.first(5).forEach(m => {
            console.log(`   - tag: "${m.user.tag}", username: "${m.user.username}", displayName: "${m.displayName}"`);
          });
          
          await interaction.reply({
            content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${discordUsername}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n\n` +
                     `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ:\n` +
                     `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n` +
                     `‚Ä¢ –ù–∏–∫ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)\n` +
                     `‚Ä¢ –í —Ñ–æ—Ä–º–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ "–í–∞—à Discord"`,
            flags: MessageFlags.Ephemeral
          });
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–¥–∞–µ–º —Ä–æ–ª—å
        const success = await sendApplicationResponse(targetMember, isAccepted, interaction.user, applicationType);

        if (success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
          await interaction.update({
            components: []
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          const roleText = isAccepted ? ` –∏ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å ${applicationType}` : '';
          await interaction.followUp({
            content: `${isAccepted ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetMember.user.tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${isAccepted ? '–ø—Ä–∏–Ω—è—Ç–∏–∏' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏'} –∑–∞—è–≤–∫–∏${roleText}.`,
            flags: MessageFlags.Ephemeral
          });
        } else {
          await interaction.reply({
            content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            flags: MessageFlags.Ephemeral
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏:', error);
        await interaction.reply({
          content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.',
          flags: MessageFlags.Ephemeral
        });
      }
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  if (interaction.isModalSubmit()) {
    if (interaction.customId.includes('staff_')) {
      await handleStaffModal(interaction);
      return;
    }
  }

  if (!interaction.isChatInputCommand()) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∞ –Ω–µ –≤ –õ–°
  if (!interaction.guild) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!',
      flags: MessageFlags.Ephemeral
    });
    return;
  }

  const { commandName, options, user: moderator } = interaction;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /yes –∏–ª–∏ /no
  if (commandName === 'yes' || commandName === 'no') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!hasPermission(interaction.member)) {
      await interaction.reply({
        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    const targetUser = options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    const isAccepted = commandName === 'yes';

    // –ü–æ–ª—É—á–∞–µ–º member –æ–±—ä–µ–∫—Ç
    const targetMember = await interaction.guild.members.fetch(targetUser.id);
    
    if (!targetMember) {
      await interaction.reply({
        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ö–µ–ª–ø–µ—Ä)
    const success = await sendApplicationResponse(targetMember, isAccepted, moderator, '—Ö–µ–ª–ø–µ—Ä');

    if (success) {
      const responseEmbed = new EmbedBuilder()
        .setTitle(isAccepted ? '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞' : '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${isAccepted ? '–ø—Ä–∏–Ω—è—Ç–∏–∏' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏'} –∑–∞—è–≤–∫–∏.`)
        .setColor(isAccepted ? 0x00ff00 : 0xff0000)
        .setTimestamp();

      await interaction.reply({ embeds: [responseEmbed], flags: MessageFlags.Ephemeral });
    } else {
      await interaction.reply({ 
        content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', 
        flags: MessageFlags.Ephemeral 
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sn (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
  if (commandName === 'sn') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!hasPermission(interaction.member)) {
      await interaction.reply({
        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    const targetUser = options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    const reason = options.getString('–ø—Ä–∏—á–∏–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º member –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
    const targetMember = await interaction.guild.members.fetch(targetUser.id);
    
    if (!targetMember) {
      await interaction.reply({
        content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    // –£–≤–æ–ª—å–Ω—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
    const result = await fireModerator(targetMember, moderator, reason);

    if (result.success) {
      let description = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} –±—ã–ª —É–≤–æ–ª–µ–Ω —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ä–æ–ª–µ–π: ${result.removedCount}`;
      
      if (result.failedCount > 0) {
        description += `\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª–µ–π: ${result.failedCount}\n\n**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–æ–ª—å –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.`;
      }
      
      const responseEmbed = new EmbedBuilder()
        .setTitle('üî® –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–≤–æ–ª–µ–Ω')
        .setDescription(description)
        .setColor(result.failedCount > 0 ? 0xffa500 : 0xff0000)
        .setTimestamp();

      await interaction.reply({ embeds: [responseEmbed], flags: MessageFlags.Ephemeral });
    } else {
      await interaction.reply({
        content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ${result.error}`,
        flags: MessageFlags.Ephemeral
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /roles (–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞)
  if (commandName === 'roles') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!hasPermission(interaction.member)) {
      await interaction.reply({
        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    const roles = interaction.guild.roles.cache
      .filter(role => role.name !== '@everyone')
      .sort((a, b) => b.position - a.position)
      .map(role => `**${role.name}** - \`${role.id}\``)
      .join('\n');

    const embed = new EmbedBuilder()
      .setTitle('üìã –†–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞')
      .setDescription(roles || '–ù–µ—Ç —Ä–æ–ª–µ–π')
      .setColor(0x5865F2)
      .setTimestamp();

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /panel (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º)
  if (commandName === 'panel') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!hasPermission(interaction.member)) {
      await interaction.reply({
        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
        flags: MessageFlags.Ephemeral
      });
      return;
    }

    const targetChannel = options.getChannel('–∫–∞–Ω–∞–ª');

    const embed = new EmbedBuilder()
      .setTitle('‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º')
      .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞')
      .setColor(0x5865F2)
      .setTimestamp();

    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('staff_hire')
          .setLabel('‚ûï –ù–∞–Ω—è—Ç—å')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId('staff_fire')
          .setLabel('üî• –£–≤–æ–ª–∏—Ç—å')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('staff_promote')
          .setLabel('‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å')
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId('staff_demote')
          .setLabel('‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å')
          .setStyle(ButtonStyle.Primary)
      );

    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('staff_warn')
          .setLabel('‚ö†Ô∏è –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('staff_unwarn')
          .setLabel('‚úÖ –°–Ω—è—Ç—å –≤–∞—Ä–Ω')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('staff_blacklist')
          .setLabel('üö´ –ß–°–ü')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('staff_list')
          .setLabel('üìã –°–ø–∏—Å–æ–∫')
          .setStyle(ButtonStyle.Primary)
      );

    const row3 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('staff_vacation_add')
          .setLabel('üèñÔ∏è –í –æ—Ç–ø—É—Å–∫')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('staff_vacation_remove')
          .setLabel('üíº –ò–∑ –æ—Ç–ø—É—Å–∫–∞')
          .setStyle(ButtonStyle.Secondary)
      );

    await targetChannel.send({
      embeds: [embed],
      components: [row1, row2, row3]
    });

    await interaction.reply({
      content: `‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${targetChannel}`,
      flags: MessageFlags.Ephemeral
    });
  }
});

// –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.once('clientReady', async () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  await registerCommands();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
  createWebhookServer(client);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(process.env.DISCORD_TOKEN);
